# TODO: Test the small functions you created,
#  trying to find different edge cases (missing keys,
#  different data types returned, Nones, etc),
#  especially the ones found in  the `json` files
#  with API responses.


# Mock the functions that require internet access,
# such as url verification, so that the tests can run
# faster, and even offline.
import json
import logging
import os
from unittest.mock import patch

import {provider}

RESOURCES = os.path.join(
    os.path.abspath(os.path.dirname(__file__)), 'tests/resources/{provider}'
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s:  %(message)s',
    level=logging.DEBUG,
)


def test_get_{media_type}_pages_returns_correctly_with_none_json():
    expect_result = None
    with patch.object(
            {provider}.delayed_requester,
            'get_response_json',
            return_value=None
    ):
        actual_result = {provider}._get_batch_json()
    assert actual_result == expect_result


def test_get_{media_type}_pages_returns_correctly_with_no_results():
    expect_result = None
    with patch.object(
            {provider}.delayed_requester,
            'get_response_json',
            return_value={}
    ):
        actual_result = {provider}._get_batch_json()
    assert actual_result == expect_result


def test_get_query_params_adds_offset():
    actual_qp = {provider}._get_query_params(
        offset=200
    )
    expected_qp = {'offset': 200}
    assert actual_qp['offset'] == expected_qp['offset']


def test_get_query_params_leaves_other_keys():
    actual_qp = {provider}._get_query_params(
        offset=200, default_query_params={'test': 'value'}
    )
    assert actual_qp['test'] == 'value'
    assert len(actual_qp.keys()) == 2


def test_get_items():
    with open(os.path.join(RESOURCES, 'page1.json')) as f:
        first_response = json.load(f)
    with patch.object(
            {provider},
            '_get_batch_json',
            side_effect=[first_response, []]
    ):
        expected_{media_type}_count = 3
        actual_{media_type}_count = {provider}._get_items()
        assert expected_{media_type}_count == actual_{media_type}_count


def test_process_item_batch_handles_example_batch():
    with open(os.path.join(RESOURCES, '{media_type}_data_example.json')) as f:
        items_batch = [json.load(f)]
    with patch.object(
            {provider}.{media_type}_store,
            'add_item',
            return_value=1
    ) as mock_add:
        {provider}._process_item_batch(items_batch)
        mock_add.assert_called_once()
        _, actual_call_args = mock_add.call_args_list[0]
        expected_call_args = {
        }
        assert actual_call_args == expected_call_args


def test_extract_{media_type}_data_returns_none_when_media_data_none():
    actual_{media_type}_info = {provider}._extract_{media_type}_data(None)
    expected_{media_type}_info = None
    assert actual_{media_type}_info is expected_{media_type}_info


def test_extract_{media_type}_data_returns_none_when_no_foreign_id():
    with open(os.path.join(RESOURCES, '{media_type}_data_example.json')) as f:
        {media_type}_data = json.load(f)
        {media_type}_data.pop('foreign_id', None)
    actual_{media_type}_info = {provider}._extract_{media_type}_data({media_type}_data)
    expected_{media_type}_info = None
    assert actual_{media_type}_info is expected_{media_type}_info


def test_extract_{media_type}_data_returns_none_when_no_{media_type}_url():
    with open(os.path.join(RESOURCES, '{media_type}_data_example.json')) as f:
        {media_type}_data = json.load(f)
        {media_type}_data.pop('{media_type}_url', None)
    actual_{media_type}_info = {provider}._extract_{media_type}_data({media_type}_data)
    assert actual_{media_type}_info is None


def test_extract_{media_type}_data_returns_none_when_no_license():
    with open(os.path.join(RESOURCES, '{media_type}_data_example.json')) as f:
        {media_type}_data = json.load(f)
        {media_type}_data.pop('license_url', None)
    actual_{media_type}_info = {provider}._extract_{media_type}_data({media_type}_data)
    assert actual_{media_type}_info is None


def test_get_creator_data():

    with open(os.path.join(RESOURCES, '{media_type}_data_example.json')) as f:
        {media_type}_data = json.load(f)
    actual_creator, actual_creator_url = {provider}._get_creator_data({media_type}_data)
    expected_creator = ''
    expected_creator_url = ''

    assert actual_creator == expected_creator
    assert actual_creator_url == expected_creator_url


def test_get_creator_data_handles_no_url():
    with open(os.path.join(RESOURCES, '{media_type}_data_example.json')) as f:
        {media_type}_data = json.load(f)
    {media_type}_data.pop('artist_url', None)
    expected_creator = ''

    actual_creator, actual_creator_url = {provider}._get_creator_data({media_type}_data)
    assert actual_creator == expected_creator
    assert actual_creator_url is None


def test_get_creator_data_returns_none_when_no_artist():
    with open(os.path.join(RESOURCES, '{media_type}_data_example.json')) as f:
        {media_type}_data = json.load(f)
    {media_type}_data.pop('artist_name', None)
    actual_creator, actual_creator_url = {provider}._get_creator_data({media_type}_data)

    assert actual_creator is None
    assert actual_creator_url is None


def test_extract_{media_type}_data_handles_example_dict():
    with open(os.path.join(RESOURCES, '{media_type}_data_example.json')) as f:
        {media_type}_data = json.load(f)

    actual_{media_type}_info = {provider}._extract_{media_type}_data({media_type}_data)
    expected_{media_type}_info = {
    }
    assert actual_{media_type}_info == expected_{media_type}_info


def test_get_tags():
    item_data = {
        "tags":['tag1', 'tag2']
    }
    expected_tags = ['tag1', 'tag2']
    actual_tags = {provider}._get_tags(item_data)
    assert expected_tags == actual_tags
